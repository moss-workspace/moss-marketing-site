// Colors
////////////////////////////////////////////////////////////////////////////////
$white: #fcfcfc;
$light-gray-0: #f5f5f5;
$light-gray-1: #f0f0f0;
$light-gray-2: #e8e8e8;
$light-gray-3: #d9d9d9;
$light-gray-4: #cdcdcd;
$dark-gray-0: #999999;
$dark-gray-1: #626262;
$dark-gray-2: #454545;
$dark-gray-3: #2b2b2b;
$black: #121212;

$blue: #5989f3;
$mid-blue: #6394fd;
$light-blue: #6d9cfe;

$red: #f5513b;
$mid-red: #f5d4cf;
$light-red: #f5ebe7;

// Units
////////////////////////////////////////////////////////////////////////////////
// Convert pixels to REM
$html-font-size: 16px;
html {
  font-size: $html-font-size;
}

@function stripUnit($value) {
  @return $value / ($value * 0 + 1);
}

@function rem($pxValue) {
  @return #{stripUnit($pxValue) / stripUnit($html-font-size)}rem;
}

// Set gutter between items
@mixin gap($value) {
  > * + * {
    margin-left: $value;
  }
}

@mixin gap-vertical($value) {
  > * + * {
    margin-top: $value;
  }
}

// Breakpoints
////////////////////////////////////////////////////////////////////////////////
$breakpoints: (
  xs: 400px,
  sm: 600px,
  md: 800px,
  header: 1050px,
  lg: 1200px,
  xl: 1568px,
) !default;

@mixin break-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin limit-width {
  max-width: 1568px;
  margin-left: auto;
  margin-right: auto;
  &.grid {
    padding-left: 0;
    padding-right: 0;
  }
  @include break-below("xl") {
    margin-left: 64px;
    margin-right: 64px;
  }
  @include break-below("md") {
    margin-left: 26px;
    margin-right: 26px;
  }
}

// Grid system
////////////////////////////////////////////////////////////////////////////////
$column-count: 12;

@for $i from 1 through $column-count {
  .col-#{$i} {
    grid-column: span #{$i};
  }
}

@for $i from 1 through $column-count {
  @for $j from 1 through $column-count {
    .col-#{$i}-#{$j} {
      grid-column: #{$j} / span #{$i};
    }
  }
}

@each $breakpoint in map-keys($breakpoints) {
  @include break-below($breakpoint) {
    @for $i from 1 through $column-count {
      @for $j from 1 through $column-count {
        .col-#{$breakpoint}-#{$i}-#{$j} {
          grid-column: #{$j} / span #{$i};
        }
      }
    }

    @for $i from 1 through $column-count {
      .col-#{$breakpoint}-#{$i} {
        grid-column: span #{$i} !important;
      }
    }
  }
}

// Transition
////////////////////////////////////////////////////////////////////////////////
@mixin transition($prop, $time, $ease) {
  -webkit-transition: $prop $time $ease;
  -moz-transition: $prop $time $ease;
  -o-transition: $prop $time $ease;
  transition: $prop $time $ease;
}

@mixin fade() {
  @include transition(all, 0.09s, ease);
  &:active {
    transition: none;
  }
}

@mixin fade-bg() {
  @include transition(background-color, 0.09s, ease);
  &:active {
    transition: none;
  }
}

@mixin fade-in() {
  @include transition(background-color, 0.3s, ease);
}

// Shadows
////////////////////////////////////////////////////////////////////////////////
@mixin shadow-toast() {
  box-shadow: 0px 0px 7px 0px rgba(0, 0, 0, 0.05);
}

@mixin shadow-menu() {
  box-shadow: 0px 0px 10px 2px rgba(0, 0, 0, 0.1);
}

@mixin shadow-icon() {
  box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.25),
    0px 0px 6px 0px rgba(0, 0, 0, 0.25);
}
